var express = require('express');
var async = require('async');
var app = module.exports = express();
console.log('kronicles api!!!!');

app.get('/', function(req, res, next) {
	return KronicleModel.find(function(err, kronicles) {
		if (!err) {
			return res.send(kronicles);
		} else {
			return console.log(err);
		}
	});
});

app.get('/steps', function(req, res, next) {
	return StepModel.find(function(err, steps) {
		if (!err) {
			return res.send(steps);
		} else {
			return res.send(err);
		}
	});
});

app.get('/:id', function(req, res, next) {
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			var steps = StepModel.find({'parentKronicle':req.params.id}, function(err, steps) {
				if (!err) {
					kronicle.steps = steps;
					return res.send(kronicle);
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});

app.get('/steps/:id', function(req, res, next) {
	return StepModel.findById(req.params.id, function(err, step) {
		if (!err) {
			return res.send(step);

		} else {
			return res.send(err);
		}
	});
});

app.get('/:id/steps', function(req, res, next) {
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			var steps = StepModel.find({'parentKronicle':req.params.id}, function(err, steps) {
				if (!err) {
					return res.send(steps);
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});

app.get('/:id/items', function(req, res, next) {
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			return res.send(kronicle.items);
		} else {
			return res.send(err);
		}
	});
});






app.post('/', function(req, res, next) {

	var kTotalTime = 0;
	for(var s in req.body.steps) {
		kTotalTime += s.time;
	}
	var kronicle = new KronicleModel({
		title		: req.body.title,
		description : req.body.description,
		category	: req.body.category,
		imageUrl	: req.body.imageUrl,
		totalTime	: kTotalTime,
		items		: req.body.items
	});

 	kronicle.save(function(err, kronicle) {
		if (!err) {
			async.forEach(req.body.steps, function(step, done) {
				step.parentKronicle = kronicle._id;
				var s = new StepModel(step);
				return s.save(done);
			}, function(err) {
			    if(err) {
					return console.log(err);
				}
	 			return res.send(kronicle);
			});
		} else {
			return console.log(err);
		}
	});

	//	Save for later, probly wont need!!!!!
	//	fs.writeFile('assets/kroncile/newImage.jpg', req.body.image, function(err){
	//		if (err) throw err;
	//		console.log('It is saved');
	//	});
});

app.post('/:id/items', function(req, res, next) {
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			return res.send(kronicle.items);
		} else {
			return res.send(err);
		}
	});
});








app.put('/:id', function(req, res, next) {
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			var kronicle = new KronicleModel({
				title		: req.body.title,
				description	: req.body.description,
				category	: req.body.category,
				imageUrl	: req.body.imageUrl,
				steps		: req.body.steps,
				items		: req.body.items
			});
			for (var s in req.body.steps) {
				var step = new StepModel({
					title			: req.body.title,
					description		: req.body.description,
					imageUrl		: req.body.imageUrl,
					parentKronicle	: req.body.parentKronicle,
					time			: req.body.time,
					indexInKronicle	: req.body.indexInKronicle
				});
				kTotalTime += s.time;
			}
			kronicle.totalTime = kTotalTime;
			return kronicle.save(function(err) {
				if (!err) {
					console.log('kronicle Updated!!');
					return res.send(kronicle);
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});

app.put('/:id/items', function(req, res, next) {
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			kronicle.items = req.body.items;
			return kronicle.save(function(err) {
				if (!err) {
					console.log('kronicle Updated!!');
					return res.send(kronicle);
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});

app.put('/step/:id', function(req, res, next) {
	return StepModel.findbyId(req.params.id, function(err, step) {
		if (!err) {
			var step = new StepModel({
				title			: req.body.title,
				description		: req.body.description,
				imageUrl		: req.body.imageUrl,
				parentKronicle	: req.body.parentKronicle,
				time			: req.body.time,
				indexInKronicle : req.body.indexInKronicle
			});
			return step.save(function(err) {
				if (!err) {
					console.log('step Updated!!');
					return res.send(step);
				} else {
					console.log(err);
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});







app.delete('/', function(req, res, next){
	return KronicleModel.remove({}, function(err) { 
		if (!err) {
			console.log('kronicles Removed');
			return res.send('kronicles Removed');
		} else {
			return res.send(err);
		}
	});
});

app.delete('/:id', function(req, res, next){
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			return kronicle.remove(function(err) {
				if (!err) {
					//console.log('all kronicles Removed');
					return res.send('all kronicles Removed');
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});

app.delete('/steps', function(req, res, next){
	return StepModel.remove({}, function(err) { 
		if (!err) {
			//console.log('all steps Removed');
			return res.send('all steps Removed');
		} else {
			return res.send(err);
		}
	});
});

app.delete('/:id/steps', function(req, res, next){
	return KronicleModel.findById(req.params.id, function(err, kronicle) {
		if (!err) {
			var steps = StepModel.remove({'parentKronicle':req.params.id}, function(err) {
				if (!err) {
					//console.log('all steps Removed');
					return res.send('all steps Removed');
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});

app.delete('/steps/:id', function(req, res, next){
	return StepModel.findById(req.params.id, function(err, step) {
		if (!err) {
			return step.remove(function(err) {
				if (!err) {
					//console.log('step Removed');
					return res.send('step Removed');
				} else {
					return res.send(err);
				}
			});
		} else {
			return res.send(err);
		}
	});
});